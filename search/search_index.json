{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Documentation \u00b6 Welcome to the project documentation. Below are the available documents for this project. Table of Contents \u00b6 CFBOOKSV Documentation This document provides detailed information about the CFBOOKSV system. TRDPB001 Documentation This document provides detailed information about the TRDPB001 process. TRDPB002 Documentation This document provides detailed information about the TRDPB002 process. TRDPB003 Documentation This document provides detailed information about the TRDPB003 process. MSTPB002 Documentation MSTPB001 Documentation This document provides detailed information about the MSTPB002 process. Please select the appropriate document to explore more details about each system.","title":"Home"},{"location":"#project-documentation","text":"Welcome to the project documentation. Below are the available documents for this project.","title":"Project Documentation"},{"location":"#table-of-contents","text":"CFBOOKSV Documentation This document provides detailed information about the CFBOOKSV system. TRDPB001 Documentation This document provides detailed information about the TRDPB001 process. TRDPB002 Documentation This document provides detailed information about the TRDPB002 process. TRDPB003 Documentation This document provides detailed information about the TRDPB003 process. MSTPB002 Documentation MSTPB001 Documentation This document provides detailed information about the MSTPB002 process. Please select the appropriate document to explore more details about each system.","title":"Table of Contents"},{"location":"CFBOOKSV/","text":"Documentation for COBOL Program CFBOOKSV \u00b6 1. High-Level Overview \u00b6 Purpose and Functionality \u00b6 The COBOL program CFBOOKSV reads records from a VSAM file containing book information and generates a report. The report is written to an output file named REP-OP . Key Inputs, Processes, and Outputs \u00b6 Inputs: VSAM file VSAMBOOK containing book records. Processes: Initialize variables and open the output file. Read all book records from the VSAM file. Write each book record to the output file. Perform housekeeping tasks and close files. Outputs: Report file REP-OP containing the processed book records. 2. Data Structures \u00b6 Input Data Formats \u00b6 Name Source Fields Book Record VSAMBOOK BOOKS-BOOK-ID , BOOKS-TITLE-TEXT , BOOKS-ISBN-TEXT , BOOKS-TOTAL-PAGES , BOOKS-PUBLISHER-ID , BOOKS-PUBLISHED-DATE , BOOKS-RATING Fields Description \u00b6 BOOKS-BOOK-ID: Numeric identifier for the book. BOOKS-TITLE-TEXT: Title of the book. BOOKS-ISBN-TEXT: ISBN number of the book. BOOKS-TOTAL-PAGES: Total number of pages in the book. BOOKS-PUBLISHER-ID: Identifier for the publisher. BOOKS-PUBLISHED-DATE: Date when the book was published. BOOKS-RATING: Rating of the book. Output Data Formats \u00b6 Name Source Fields Report Record REP-OP WS-HEADER-TITLE , WS-HEADER-TIME , WS-SPACE , WS-HEADER-LABEL , WS-HEADER-LINE , WS-FOOTER Fields Description \u00b6 WS-HEADER-TITLE: Header title for the report. WS-HEADER-TIME: Timestamp for the report. WS-SPACE: Space filler. WS-HEADER-LABEL: Label for the header. WS-HEADER-LINE: Line for the header. WS-FOOTER: Footer for the report. 3. Functional Decomposition \u00b6 Functions and Modules \u00b6 0000-MAIN \u00b6 Inputs: None Outputs: None Description: Main entry point of the program. Initializes variables, opens files, reads records, writes records, and performs housekeeping. 1000-INITIALIZE \u00b6 Inputs: None Outputs: None Description: Initializes variables and opens the output file REP-OP . 1100-WRITE-HEADER \u00b6 Inputs: REP-OP-FIELDS Outputs: None Description: Writes the header information to the output file. 1200-READ-BOOK \u00b6 Inputs: None Outputs: None Description: Reads the next book record from the VSAM file VSAMBOOK . 2000-READ-ALL-BOOKS \u00b6 Inputs: Book fields from VSAMBOOK Outputs: None Description: Reads all book records from the VSAM file and processes them. 2100-WRITE-RECORD \u00b6 Inputs: WS-PAGE-NO , WS-REC-COUNT , WS-WRITE-REC , 88-DONT-WRITE-REC , REP-OP-FIELDS Outputs: None Description: Writes a book record to the output file REP-OP . 3000-HOUSEKEEPING \u00b6 Inputs: REP-OP-FIELDS Outputs: None Description: Performs housekeeping tasks such as writing the footer and closing the output file. 9998-FILE-ERR-CHK \u00b6 Inputs: ERR-LOC , ERR-MSG , ERR-PGM Outputs: None Description: Checks for file errors and logs messages. 9999-VSAM-ERR-CHK \u00b6 Inputs: ERR-LOC , ERR-MSG , ERR-PGM , VSAM-REASON-CODE , VSAM-RETURN-CODE , VSAM-COMPONENT-CODE Outputs: None Description: Checks for VSAM errors and logs messages. 4. Program Logic \u00b6 Pseudocode Representation \u00b6 BEGIN PROGRAM CFBOOKSV PERFORM 1000-INITIALIZE THRU 1000-EXIT MOVE 1 TO WS-PAGE-NO PERFORM 1100-WRITE-HEADER THRU 1100-EXIT MOVE SPACES TO EOF-FLAG OPEN INPUT VSAMBOOK MOVE 'ERROR OPENING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT MOVE 0 TO BOOKS-BOOK-ID START VSAMBOOK KEY >= BOOKS-BOOK-ID MOVE 'ERROR POSITIONING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 1200-READ-BOOK THRU 1200-EXIT PERFORM 2000-READ-ALL-BOOKS THRU 2000-EXIT UNTIL END-OF-FILE CLOSE VSAMBOOK MOVE 'ERROR CLOSING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 3000-HOUSEKEEPING THRU 3000-EXIT STOP RUN END PROGRAM CFBOOKSV Detailed Steps \u00b6 Initialization: Perform initialization by calling 1000-INITIALIZE . Set the page number to 1. Write the header to the output file by calling 1100-WRITE-HEADER . Set the EOF flag to spaces. Open the VSAM file VSAMBOOK for input. Handle any errors during file opening by calling 9999-VSAM-ERR-CHK . Reading and Processing Records: Set the book ID to 0. Start reading the VSAM file from the beginning. Handle any errors during file positioning by calling 9999-VSAM-ERR-CHK . Read the first book record by calling 1200-READ-BOOK . Loop through all book records by calling 2000-READ-ALL-BOOKS until the end of the file is reached. Closing Files and Housekeeping: Close the VSAM file VSAMBOOK . Handle any errors during file closing by calling 9999-VSAM-ERR-CHK . Perform housekeeping tasks by calling 3000-HOUSEKEEPING . Terminate the program. This documentation provides a comprehensive guide to understanding and re-implementing the functionality of the COBOL program CFBOOKSV in a modern programming language.","title":"Documentation for COBOL Program CFBOOKSV"},{"location":"CFBOOKSV/#documentation-for-cobol-program-cfbooksv","text":"","title":"Documentation for COBOL Program CFBOOKSV"},{"location":"CFBOOKSV/#1-high-level-overview","text":"","title":"1. High-Level Overview"},{"location":"CFBOOKSV/#purpose-and-functionality","text":"The COBOL program CFBOOKSV reads records from a VSAM file containing book information and generates a report. The report is written to an output file named REP-OP .","title":"Purpose and Functionality"},{"location":"CFBOOKSV/#key-inputs-processes-and-outputs","text":"Inputs: VSAM file VSAMBOOK containing book records. Processes: Initialize variables and open the output file. Read all book records from the VSAM file. Write each book record to the output file. Perform housekeeping tasks and close files. Outputs: Report file REP-OP containing the processed book records.","title":"Key Inputs, Processes, and Outputs"},{"location":"CFBOOKSV/#2-data-structures","text":"","title":"2. Data Structures"},{"location":"CFBOOKSV/#input-data-formats","text":"Name Source Fields Book Record VSAMBOOK BOOKS-BOOK-ID , BOOKS-TITLE-TEXT , BOOKS-ISBN-TEXT , BOOKS-TOTAL-PAGES , BOOKS-PUBLISHER-ID , BOOKS-PUBLISHED-DATE , BOOKS-RATING","title":"Input Data Formats"},{"location":"CFBOOKSV/#output-data-formats","text":"Name Source Fields Report Record REP-OP WS-HEADER-TITLE , WS-HEADER-TIME , WS-SPACE , WS-HEADER-LABEL , WS-HEADER-LINE , WS-FOOTER","title":"Output Data Formats"},{"location":"CFBOOKSV/#3-functional-decomposition","text":"","title":"3. Functional Decomposition"},{"location":"CFBOOKSV/#functions-and-modules","text":"","title":"Functions and Modules"},{"location":"CFBOOKSV/#4-program-logic","text":"","title":"4. Program Logic"},{"location":"CFBOOKSV/#pseudocode-representation","text":"BEGIN PROGRAM CFBOOKSV PERFORM 1000-INITIALIZE THRU 1000-EXIT MOVE 1 TO WS-PAGE-NO PERFORM 1100-WRITE-HEADER THRU 1100-EXIT MOVE SPACES TO EOF-FLAG OPEN INPUT VSAMBOOK MOVE 'ERROR OPENING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT MOVE 0 TO BOOKS-BOOK-ID START VSAMBOOK KEY >= BOOKS-BOOK-ID MOVE 'ERROR POSITIONING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 1200-READ-BOOK THRU 1200-EXIT PERFORM 2000-READ-ALL-BOOKS THRU 2000-EXIT UNTIL END-OF-FILE CLOSE VSAMBOOK MOVE 'ERROR CLOSING VSAMBOOK' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 3000-HOUSEKEEPING THRU 3000-EXIT STOP RUN END PROGRAM CFBOOKSV","title":"Pseudocode Representation"},{"location":"CFBOOKSV/#detailed-steps","text":"Initialization: Perform initialization by calling 1000-INITIALIZE . Set the page number to 1. Write the header to the output file by calling 1100-WRITE-HEADER . Set the EOF flag to spaces. Open the VSAM file VSAMBOOK for input. Handle any errors during file opening by calling 9999-VSAM-ERR-CHK . Reading and Processing Records: Set the book ID to 0. Start reading the VSAM file from the beginning. Handle any errors during file positioning by calling 9999-VSAM-ERR-CHK . Read the first book record by calling 1200-READ-BOOK . Loop through all book records by calling 2000-READ-ALL-BOOKS until the end of the file is reached. Closing Files and Housekeeping: Close the VSAM file VSAMBOOK . Handle any errors during file closing by calling 9999-VSAM-ERR-CHK . Perform housekeeping tasks by calling 3000-HOUSEKEEPING . Terminate the program. This documentation provides a comprehensive guide to understanding and re-implementing the functionality of the COBOL program CFBOOKSV in a modern programming language.","title":"Detailed Steps"},{"location":"MSTPB001/","text":"MSTPB001 COBOL Program Documentation \u00b6 1. High-Level Overview \u00b6 Purpose and Functionality: The MSTPB001 COBOL program is designed to retrieve customer data from a database. It processes the main logic and then specifically fetches customer details based on a given customer ID. Key Inputs, Processes, and Outputs: - Inputs: - Customer ID - Processes: - Main logic processing - Fetching customer details from the database - Outputs: - Customer details including currency, description, and status - Error messages if the customer is not found or inactive 2. Data Structures \u00b6 Input Data Formats \u00b6 Name Source Fields Customer Input User/Input LS-CUSTOMER-ID : PIC X(10) - The ID of the customer to fetch. Output Data Formats \u00b6 Name Source Fields Customer Output Program Output LS-CUSTOMER-CURRENCY : PIC X(3) - The currency code of the customer. LS-CUSTOMER-DESCRIPTION : PIC X(50) - The description of the customer. LS-CUSTOMER-STATUS : PIC X(1) - The status of the customer (A for active, I for inactive). LS-CUSTOMER-ERROR-MSG : PIC X(100) - Error message if the customer is not found or inactive. 3. Functional Decomposition \u00b6 Main Functions \u00b6 0000-MAINLINE \u00b6 Inputs: None Outputs: Sets 88-CUSTOMER-EXCEPTION , initializes LS-CUSTOMER-ERROR-MSG , calls 1000-GET-CUSTOMER Description: Sets the exception flag to true. Initializes the error message to spaces. Calls the 1000-GET-CUSTOMER function. Returns control to the caller. 1000-GET-CUSTOMER \u00b6 Inputs: SQL-INIT-DONE , SQL-INIT-FLAG , CUS-STATUS , LS-CUSTOMER-ID Outputs: LS-CUSTOMER-CURRENCY , LS-CUSTOMER-DESCRIPTION , LS-CUSTOMER-STATUS , LS-CUSTOMER-ERROR-MSG Description: Checks if SQL is initialized. Fetches customer details from the database. Sets the output fields based on the fetched data. Handles exceptions and sets error messages if needed. 4. Detailed Logic \u00b6 0000-MAINLINE \u00b6 Initialize Exception Flag: SET 88-CUSTOMER-EXCEPTION TO TRUE Initialize Error Message: MOVE SPACES TO LS-CUSTOMER-ERROR-MSG Call Get Customer Function: PERFORM 1000-GET-CUSTOMER Return Control: GOBACK 1000-GET-CUSTOMER \u00b6 Check SQL Initialization: IF SQL-INIT-DONE NOT = 'Y' MOVE 'SQL NOT INITIALIZED' TO LS-CUSTOMER-ERROR-MSG EXIT Fetch Customer Details: EXEC SQL SELECT CURRENCY, DESCRIPTION, STATUS INTO :LS-CUSTOMER-CURRENCY, :LS-CUSTOMER-DESCRIPTION, :LS-CUSTOMER-STATUS FROM CUSTOMERS WHERE CUSTOMER_ID = :LS-CUSTOMER-ID END-EXEC Handle SQL Errors: IF SQLCODE NOT = 0 MOVE 'CUSTOMER NOT FOUND' TO LS-CUSTOMER-ERROR-MSG EXIT Check Customer Status: IF LS-CUSTOMER-STATUS = 'I' MOVE 'CUSTOMER INACTIVE' TO LS-CUSTOMER-ERROR-MSG EXIT 5. Error Handling \u00b6 Common Errors and Messages \u00b6 Error Condition Error Message SQL Not Initialized SQL NOT INITIALIZED Customer Not Found CUSTOMER NOT FOUND Customer Inactive CUSTOMER INACTIVE 6. Example Usage \u00b6 Input Example \u00b6 LS-CUSTOMER-ID: '1234567890' Output Example \u00b6 LS-CUSTOMER-CURRENCY: 'USD' LS-CUSTOMER-DESCRIPTION: 'John Doe' LS-CUSTOMER-STATUS: 'A' LS-CUSTOMER-ERROR-MSG: '' Error Example \u00b6 LS-CUSTOMER-ID: '0000000000' LS-CUSTOMER-ERROR-MSG: 'CUSTOMER NOT FOUND' This documentation provides a comprehensive overview of the MSTPB001 COBOL program, detailing its purpose, data structures, functional decomposition, detailed logic, error handling, and example usage. This should enable a developer with no prior COBOL experience to re-implement its functionality in a modern programming language.","title":"MSTPB001 COBOL Program Documentation"},{"location":"MSTPB001/#mstpb001-cobol-program-documentation","text":"","title":"MSTPB001 COBOL Program Documentation"},{"location":"MSTPB001/#1-high-level-overview","text":"Purpose and Functionality: The MSTPB001 COBOL program is designed to retrieve customer data from a database. It processes the main logic and then specifically fetches customer details based on a given customer ID. Key Inputs, Processes, and Outputs: - Inputs: - Customer ID - Processes: - Main logic processing - Fetching customer details from the database - Outputs: - Customer details including currency, description, and status - Error messages if the customer is not found or inactive","title":"1. High-Level Overview"},{"location":"MSTPB001/#2-data-structures","text":"","title":"2. Data Structures"},{"location":"MSTPB001/#input-data-formats","text":"Name Source Fields Customer Input User/Input LS-CUSTOMER-ID : PIC X(10) - The ID of the customer to fetch.","title":"Input Data Formats"},{"location":"MSTPB001/#output-data-formats","text":"Name Source Fields Customer Output Program Output LS-CUSTOMER-CURRENCY : PIC X(3) - The currency code of the customer. LS-CUSTOMER-DESCRIPTION : PIC X(50) - The description of the customer. LS-CUSTOMER-STATUS : PIC X(1) - The status of the customer (A for active, I for inactive). LS-CUSTOMER-ERROR-MSG : PIC X(100) - Error message if the customer is not found or inactive.","title":"Output Data Formats"},{"location":"MSTPB001/#3-functional-decomposition","text":"","title":"3. Functional Decomposition"},{"location":"MSTPB001/#main-functions","text":"","title":"Main Functions"},{"location":"MSTPB001/#4-detailed-logic","text":"","title":"4. Detailed Logic"},{"location":"MSTPB001/#0000-mainline_1","text":"Initialize Exception Flag: SET 88-CUSTOMER-EXCEPTION TO TRUE Initialize Error Message: MOVE SPACES TO LS-CUSTOMER-ERROR-MSG Call Get Customer Function: PERFORM 1000-GET-CUSTOMER Return Control: GOBACK","title":"0000-MAINLINE"},{"location":"MSTPB001/#1000-get-customer_1","text":"Check SQL Initialization: IF SQL-INIT-DONE NOT = 'Y' MOVE 'SQL NOT INITIALIZED' TO LS-CUSTOMER-ERROR-MSG EXIT Fetch Customer Details: EXEC SQL SELECT CURRENCY, DESCRIPTION, STATUS INTO :LS-CUSTOMER-CURRENCY, :LS-CUSTOMER-DESCRIPTION, :LS-CUSTOMER-STATUS FROM CUSTOMERS WHERE CUSTOMER_ID = :LS-CUSTOMER-ID END-EXEC Handle SQL Errors: IF SQLCODE NOT = 0 MOVE 'CUSTOMER NOT FOUND' TO LS-CUSTOMER-ERROR-MSG EXIT Check Customer Status: IF LS-CUSTOMER-STATUS = 'I' MOVE 'CUSTOMER INACTIVE' TO LS-CUSTOMER-ERROR-MSG EXIT","title":"1000-GET-CUSTOMER"},{"location":"MSTPB001/#5-error-handling","text":"","title":"5. Error Handling"},{"location":"MSTPB001/#common-errors-and-messages","text":"Error Condition Error Message SQL Not Initialized SQL NOT INITIALIZED Customer Not Found CUSTOMER NOT FOUND Customer Inactive CUSTOMER INACTIVE","title":"Common Errors and Messages"},{"location":"MSTPB001/#6-example-usage","text":"","title":"6. Example Usage"},{"location":"MSTPB001/#input-example","text":"LS-CUSTOMER-ID: '1234567890'","title":"Input Example"},{"location":"MSTPB001/#output-example","text":"LS-CUSTOMER-CURRENCY: 'USD' LS-CUSTOMER-DESCRIPTION: 'John Doe' LS-CUSTOMER-STATUS: 'A' LS-CUSTOMER-ERROR-MSG: ''","title":"Output Example"},{"location":"MSTPB001/#error-example","text":"LS-CUSTOMER-ID: '0000000000' LS-CUSTOMER-ERROR-MSG: 'CUSTOMER NOT FOUND' This documentation provides a comprehensive overview of the MSTPB001 COBOL program, detailing its purpose, data structures, functional decomposition, detailed logic, error handling, and example usage. This should enable a developer with no prior COBOL experience to re-implement its functionality in a modern programming language.","title":"Error Example"},{"location":"MSTPB002/","text":"MSTPB002 Documentation \u00b6 High-Level Overview \u00b6 The COBOL program MSTPB002 is designed to retrieve security data. It performs operations to fetch and process security-related information from a database. Indicative Test Cases Data Structures \u00b6 Input Data Formats: \u00b6 Name Source Fields Security Input Record Internal SQL-INIT-FLAG , SEC-SYMBOL , LS-FIGI , SEC-CURRENCY , SQL-INIT-DONE , SEC-SHARE-CLASS-FIGI , SQLCODE , SEC-DESCRIPTION , SEC-TYPE Output Data Formats: \u00b6 Name Source Fields Security Output Record Internal 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , LS-SECURITY-STATUS , SEC-CURRENCY , LS-CURRENCY , WS-SQLCODE , LS-DESCRIPTION , LS-SYMBOL , LS-SHARE-CLASS-FIGI , LS-TYPE , RETURN-CODE Functional Decomposition \u00b6 Main Functions: \u00b6 0000-MAINLINE Inputs: None Outputs: 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , LS-SECURITY-STATUS Description: Initializes variables and calls the 1000-GET-SECURITY function to retrieve security data. 1000-GET-SECURITY Inputs: SQL-INIT-FLAG , SEC-SYMBOL , LS-FIGI , SEC-CURRENCY , SQL-INIT-DONE , SEC-SHARE-CLASS-FIGI , SQLCODE , SEC-DESCRIPTION , SEC-TYPE Outputs: 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , SEC-SYMBOL , 88-SECURITY-ACTIVE , LS-CURRENCY , WS-SQLCODE , SQLCODE , SEC-TYPE , SEC-FIGI , LS-SHARE-CLASS-FIGI , LS-FIGI , LS-SYMBOL , LS-SECURITY-STATUS , RETURN-CODE , SEC-CURRENCY , LS-DESCRIPTION , SEC-SHARE-CLASS-FIGI , 88-SECURITY-NOT-FOUND , SEC-DESCRIPTION , LS-TYPE Description: Retrieves security data from the database and processes it based on the SQLCODE. Program Logic \u00b6 Pseudocode: \u00b6 PROCEDURE DIVISION. 0000-MAINLINE. SET 88-SECURITY-EXCEPTION TO TRUE MOVE SPACES TO LS-SECURITY-ERROR-MSG PERFORM 1000-GET-SECURITY THRU 1000-EXIT GOBACK 1000-GET-SECURITY. MOVE LS-FIGI TO SEC-FIGI EXEC SQL SELECT SEC_CURRENCY, SEC_DESCRIPTION, SEC_SYMBOL, SEC_SHARE_CLASS_FIGI, SEC_TYPE INTO :SEC-CURRENCY, :SEC-DESCRIPTION, :SEC-SYMBOL, :SEC-SHARE-CLASS-FIGI, :SEC-TYPE FROM TBTRDSEC WHERE SEC_FIGI = :SEC-FIGI END-EXEC MOVE SQLCODE TO WS-SQLCODE EVALUATE SQLCODE WHEN 0 MOVE SEC-CURRENCY TO LS-CURRENCY MOVE SEC-DESCRIPTION TO LS-DESCRIPTION MOVE SEC-SYMBOL TO LS-SYMBOL MOVE SEC-SHARE-CLASS-FIGI TO LS-SHARE-CLASS-FIGI MOVE SEC-TYPE TO LS-TYPE SET 88-SECURITY-ACTIVE TO TRUE WHEN 100 SET 88-SECURITY-NOT-FOUND TO TRUE MOVE 'SECURITY Not Found' TO LS-SECURITY-ERROR-MSG WHEN OTHER SET 88-SECURITY-EXCEPTION TO TRUE MOVE SPACES TO LS-SECURITY-ERROR-MSG STRING 'SECURITY Access failed. SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO LS-SECURITY-ERROR-MSG END-EVALUATE 1000-EXIT. EXIT.","title":"MSTPB002 Documentation"},{"location":"MSTPB002/#mstpb002-documentation","text":"","title":"MSTPB002 Documentation"},{"location":"MSTPB002/#high-level-overview","text":"The COBOL program MSTPB002 is designed to retrieve security data. It performs operations to fetch and process security-related information from a database. Indicative Test Cases","title":"High-Level Overview"},{"location":"MSTPB002/#data-structures","text":"","title":"Data Structures"},{"location":"MSTPB002/#input-data-formats","text":"Name Source Fields Security Input Record Internal SQL-INIT-FLAG , SEC-SYMBOL , LS-FIGI , SEC-CURRENCY , SQL-INIT-DONE , SEC-SHARE-CLASS-FIGI , SQLCODE , SEC-DESCRIPTION , SEC-TYPE","title":"Input Data Formats:"},{"location":"MSTPB002/#output-data-formats","text":"Name Source Fields Security Output Record Internal 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , LS-SECURITY-STATUS , SEC-CURRENCY , LS-CURRENCY , WS-SQLCODE , LS-DESCRIPTION , LS-SYMBOL , LS-SHARE-CLASS-FIGI , LS-TYPE , RETURN-CODE","title":"Output Data Formats:"},{"location":"MSTPB002/#functional-decomposition","text":"","title":"Functional Decomposition"},{"location":"MSTPB002/#main-functions","text":"0000-MAINLINE Inputs: None Outputs: 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , LS-SECURITY-STATUS Description: Initializes variables and calls the 1000-GET-SECURITY function to retrieve security data. 1000-GET-SECURITY Inputs: SQL-INIT-FLAG , SEC-SYMBOL , LS-FIGI , SEC-CURRENCY , SQL-INIT-DONE , SEC-SHARE-CLASS-FIGI , SQLCODE , SEC-DESCRIPTION , SEC-TYPE Outputs: 88-SECURITY-EXCEPTION , LS-SECURITY-ERROR-MSG , SEC-SYMBOL , 88-SECURITY-ACTIVE , LS-CURRENCY , WS-SQLCODE , SQLCODE , SEC-TYPE , SEC-FIGI , LS-SHARE-CLASS-FIGI , LS-FIGI , LS-SYMBOL , LS-SECURITY-STATUS , RETURN-CODE , SEC-CURRENCY , LS-DESCRIPTION , SEC-SHARE-CLASS-FIGI , 88-SECURITY-NOT-FOUND , SEC-DESCRIPTION , LS-TYPE Description: Retrieves security data from the database and processes it based on the SQLCODE.","title":"Main Functions:"},{"location":"MSTPB002/#program-logic","text":"","title":"Program Logic"},{"location":"MSTPB002/#pseudocode","text":"PROCEDURE DIVISION. 0000-MAINLINE. SET 88-SECURITY-EXCEPTION TO TRUE MOVE SPACES TO LS-SECURITY-ERROR-MSG PERFORM 1000-GET-SECURITY THRU 1000-EXIT GOBACK 1000-GET-SECURITY. MOVE LS-FIGI TO SEC-FIGI EXEC SQL SELECT SEC_CURRENCY, SEC_DESCRIPTION, SEC_SYMBOL, SEC_SHARE_CLASS_FIGI, SEC_TYPE INTO :SEC-CURRENCY, :SEC-DESCRIPTION, :SEC-SYMBOL, :SEC-SHARE-CLASS-FIGI, :SEC-TYPE FROM TBTRDSEC WHERE SEC_FIGI = :SEC-FIGI END-EXEC MOVE SQLCODE TO WS-SQLCODE EVALUATE SQLCODE WHEN 0 MOVE SEC-CURRENCY TO LS-CURRENCY MOVE SEC-DESCRIPTION TO LS-DESCRIPTION MOVE SEC-SYMBOL TO LS-SYMBOL MOVE SEC-SHARE-CLASS-FIGI TO LS-SHARE-CLASS-FIGI MOVE SEC-TYPE TO LS-TYPE SET 88-SECURITY-ACTIVE TO TRUE WHEN 100 SET 88-SECURITY-NOT-FOUND TO TRUE MOVE 'SECURITY Not Found' TO LS-SECURITY-ERROR-MSG WHEN OTHER SET 88-SECURITY-EXCEPTION TO TRUE MOVE SPACES TO LS-SECURITY-ERROR-MSG STRING 'SECURITY Access failed. SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO LS-SECURITY-ERROR-MSG END-EVALUATE 1000-EXIT. EXIT.","title":"Pseudocode:"},{"location":"MSTPB002_test_cases/","text":"Test Cases for MSTPB002 Migration \u00b6 To ensure the successful migration of the COBOL program MSTPB002 to a modern programming language, we need to create comprehensive test cases. These test cases will verify that the migrated program behaves as expected and produces the correct outputs based on various input scenarios. Test Case 1: Successful Security Data Retrieval \u00b6 Description: Verify that the program successfully retrieves security data when the security FIGI exists in the database. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '123456' - SEC-SYMBOL : 'AAPL' - SEC-CURRENCY : 'USD' - SEC-SHARE-CLASS-FIGI : '1234567890' - SEC-DESCRIPTION : 'Apple Inc.' - SEC-TYPE : 'Equity' Expected Output: - LS-CURRENCY : 'USD' - LS-DESCRIPTION : 'Apple Inc.' - LS-SYMBOL : 'AAPL' - LS-SHARE-CLASS-FIGI : '1234567890' - LS-TYPE : 'Equity' - 88-SECURITY-ACTIVE : TRUE - 88-SECURITY-EXCEPTION : FALSE - 88-SECURITY-NOT-FOUND : FALSE - LS-SECURITY-ERROR-MSG : '' Test Case 2: Security Data Not Found \u00b6 Description: Verify that the program handles the case where the security FIGI does not exist in the database. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '999999' - SEC-SYMBOL : '' - SEC-CURRENCY : '' - SEC-SHARE-CLASS-FIGI : '' - SEC-DESCRIPTION : '' - SEC-TYPE : '' Expected Output: - LS-CURRENCY : '' - LS-DESCRIPTION : '' - LS-SYMBOL : '' - LS-SHARE-CLASS-FIGI : '' - LS-TYPE : '' - 88-SECURITY-ACTIVE : FALSE - 88-SECURITY-EXCEPTION : FALSE - 88-SECURITY-NOT-FOUND : TRUE - LS-SECURITY-ERROR-MSG : 'SECURITY Not Found' Test Case 3: SQL Exception Handling \u00b6 Description: Verify that the program handles SQL exceptions correctly. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '123456' - SEC-SYMBOL : 'AAPL' - SEC-CURRENCY : 'USD' - SEC-SHARE-CLASS-FIGI : '1234567890' - SEC-DESCRIPTION : 'Apple Inc.' - SEC-TYPE : 'Equity' Expected Output: - LS-CURRENCY : '' - LS-DESCRIPTION : '' - LS-SYMBOL : '' - LS-SHARE-CLASS-FIGI : '' - LS-TYPE : '' - 88-SECURITY-ACTIVE : FALSE - 88-SECURITY-EXCEPTION : TRUE - 88-SECURITY-NOT-FOUND : FALSE - LS-SECURITY-ERROR-MSG : 'SECURITY Access failed. SQLCODE = '","title":"Test Cases for MSTPB002 Migration"},{"location":"MSTPB002_test_cases/#test-cases-for-mstpb002-migration","text":"To ensure the successful migration of the COBOL program MSTPB002 to a modern programming language, we need to create comprehensive test cases. These test cases will verify that the migrated program behaves as expected and produces the correct outputs based on various input scenarios.","title":"Test Cases for MSTPB002 Migration"},{"location":"MSTPB002_test_cases/#test-case-1-successful-security-data-retrieval","text":"Description: Verify that the program successfully retrieves security data when the security FIGI exists in the database. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '123456' - SEC-SYMBOL : 'AAPL' - SEC-CURRENCY : 'USD' - SEC-SHARE-CLASS-FIGI : '1234567890' - SEC-DESCRIPTION : 'Apple Inc.' - SEC-TYPE : 'Equity' Expected Output: - LS-CURRENCY : 'USD' - LS-DESCRIPTION : 'Apple Inc.' - LS-SYMBOL : 'AAPL' - LS-SHARE-CLASS-FIGI : '1234567890' - LS-TYPE : 'Equity' - 88-SECURITY-ACTIVE : TRUE - 88-SECURITY-EXCEPTION : FALSE - 88-SECURITY-NOT-FOUND : FALSE - LS-SECURITY-ERROR-MSG : ''","title":"Test Case 1: Successful Security Data Retrieval"},{"location":"MSTPB002_test_cases/#test-case-2-security-data-not-found","text":"Description: Verify that the program handles the case where the security FIGI does not exist in the database. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '999999' - SEC-SYMBOL : '' - SEC-CURRENCY : '' - SEC-SHARE-CLASS-FIGI : '' - SEC-DESCRIPTION : '' - SEC-TYPE : '' Expected Output: - LS-CURRENCY : '' - LS-DESCRIPTION : '' - LS-SYMBOL : '' - LS-SHARE-CLASS-FIGI : '' - LS-TYPE : '' - 88-SECURITY-ACTIVE : FALSE - 88-SECURITY-EXCEPTION : FALSE - 88-SECURITY-NOT-FOUND : TRUE - LS-SECURITY-ERROR-MSG : 'SECURITY Not Found'","title":"Test Case 2: Security Data Not Found"},{"location":"MSTPB002_test_cases/#test-case-3-sql-exception-handling","text":"Description: Verify that the program handles SQL exceptions correctly. Input: - SQL-INIT-FLAG : 'Y' - SEC-FIGI : '123456' - SEC-SYMBOL : 'AAPL' - SEC-CURRENCY : 'USD' - SEC-SHARE-CLASS-FIGI : '1234567890' - SEC-DESCRIPTION : 'Apple Inc.' - SEC-TYPE : 'Equity' Expected Output: - LS-CURRENCY : '' - LS-DESCRIPTION : '' - LS-SYMBOL : '' - LS-SHARE-CLASS-FIGI : '' - LS-TYPE : '' - 88-SECURITY-ACTIVE : FALSE - 88-SECURITY-EXCEPTION : TRUE - 88-SECURITY-NOT-FOUND : FALSE - LS-SECURITY-ERROR-MSG : 'SECURITY Access failed. SQLCODE = '","title":"Test Case 3: SQL Exception Handling"},{"location":"TRDPB001/","text":"Documentation for COBOL Program TRDPB001 \u00b6 1. High-Level Overview \u00b6 Purpose and Functionality \u00b6 The COBOL program TRDPB001 handles order settlement processes. It reads from a settlement queue, books settlement and money accounts, updates orders, and logs summaries. The program supports multi-threading by running multiple batch jobs for settling trades based on currency. Key Inputs, Processes, and Outputs \u00b6 Inputs: Settlement Queue ( TBTRDSTQ ) Trade Data Processes: Initialize variables and open the settlement queue. Read and process trade records from the settlement queue. Perform accounting operations including booking settlement and money accounts. Update order statuses. Log summaries and handle exceptions. Outputs: Updated order records. Logged summaries. Exception reports. 2. Data Structures \u00b6 Input Data Formats \u00b6 Name Source Fields Trade Record TBTRDSTQ STQ-ID , STQ-TRADE-DATA , STQ-CURRENCY Fields Description \u00b6 STQ-ID: Identifier for the settlement queue entry. STQ-TRADE-DATA: Data related to the trade. STQ-CURRENCY: Currency of the trade. Output Data Formats \u00b6 Name Source Fields Order Record TBTRDORD ORD-STATUS , ORD-CURRENCY , ORD-TRADING-XCHNG , ORD-TRADEID , ORD-FIGI , ORD-BUY-SELL-IND Summary Record TBTRDSUM SUM-CUSTOMER-ID , SUM-OVERDUE , SUM-REJECTED , SUM-SETTLED , SUM-CURRENCY , SUM-OPEN-BALANCE , SUM-TOTAL-DEBIT , SUM-TOTAL-CREDIT , SUM-CLOSE-BALANCE Exception Record TRDPBEXC EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE Fields Description \u00b6 ORD-STATUS: Status of the order. ORD-CURRENCY: Currency of the order. ORD-TRADING-XCHNG: Trading exchange of the order. ORD-TRADEID: Trade identifier. ORD-FIGI: Financial Instrument Global Identifier. ORD-BUY-SELL-IND: Indicator for buy or sell. SUM-CUSTOMER-ID: Customer identifier for the summary. SUM-OVERDUE: Number of overdue trades. SUM-REJECTED: Number of rejected trades. SUM-SETTLED: Number of settled trades. SUM-CURRENCY: Currency for the summary. SUM-OPEN-BALANCE: Opening balance for the summary. SUM-TOTAL-DEBIT: Total debit amount for the summary. SUM-TOTAL-CREDIT: Total credit amount for the summary. SUM-CLOSE-BALANCE: Closing balance for the summary. EXCEPTION-DESC: Description of the exception. EXCEPTION-RECORD-LEN: Length of the exception record. EXCEPTION-TYPE: Type of the exception. 3. Functional Decomposition \u00b6 Functions and Modules \u00b6 0000-MAINLINE \u00b6 Inputs: None Outputs: None Description: Main entry point of the program. Initializes variables, opens files, reads records, writes records, and performs housekeeping. 1000-TRADE-SETTLEMENT \u00b6 Inputs: Trade data from TBTRDSTQ Outputs: None Description: Handles the settlement of trades by reading from the settlement queue and performing accounting operations. 2000-ACCOUNTING \u00b6 Inputs: Trade data Outputs: None Description: Performs accounting operations including booking settlement and money accounts. 2001-SAC-BOOKING \u00b6 Inputs: Trade data Outputs: None Description: Books settlement accounts. 2002-MAC-BOOKING \u00b6 Inputs: Trade data Outputs: None Description: Books money accounts. 5000-READ-FROM-STLMT-QUEUE \u00b6 Inputs: Settlement queue data Outputs: Trade data Description: Reads trade data from the settlement queue. 8000-UPDATE-ORDER \u00b6 Inputs: Order data Outputs: Updated order records Description: Updates the status of orders. 8001-LOG-SUMMARY \u00b6 Inputs: Summary data Outputs: Logged summaries Description: Logs summary information for the processed trades. 9000-REPORT-EXCEPTION \u00b6 Inputs: Exception data Outputs: Exception reports Description: Reports exceptions encountered during processing. 4. Program Logic \u00b6 Pseudocode Representation \u00b6 BEGIN PROGRAM TRDPB001 PERFORM 1000-INITIALIZE THRU 1000-EXIT MOVE 1 TO WS-PAGE-NO PERFORM 1100-WRITE-HEADER THRU 1100-EXIT MOVE SPACES TO EOF-FLAG OPEN INPUT TBTRDSTQ MOVE 'ERROR OPENING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT MOVE 0 TO STQ-ID START TBTRDSTQ KEY >= STQ-ID MOVE 'ERROR POSITIONING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 1200-READ-BOOK THRU 1200-EXIT PERFORM 2000-READ-ALL-BOOKS THRU 2000-EXIT UNTIL END-OF-FILE CLOSE TBTRDSTQ MOVE 'ERROR CLOSING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 3000-HOUSEKEEPING THRU 3000-EXIT STOP RUN END PROGRAM TRDPB001 Detailed Steps \u00b6 Initialization: Perform initialization by calling 1000-INITIALIZE . Set the page number to 1. Write the header to the output file by calling 1100-WRITE-HEADER . Set the EOF flag to spaces. Open the settlement queue file TBTRDSTQ for input. Handle any errors during file opening by calling 9999-VSAM-ERR-CHK . Reading and Processing Records: Set the settlement queue ID to 0. Start reading the settlement queue file from the beginning. Handle any errors during file positioning by calling 9999-VSAM-ERR-CHK . Read the first trade record by calling 1200-READ-BOOK . Loop through all trade records by calling 2000-READ-ALL-BOOKS until the end of the file is reached. Closing Files and Housekeeping: Close the settlement queue file TBTRDSTQ . Handle any errors during file closing by calling 9999-VSAM-ERR-CHK . Perform housekeeping tasks by calling 3000-HOUSEKEEPING . Terminate the program. This documentation provides a comprehensive guide to understanding and re-implementing the functionality of the COBOL program TRDPB001 in a modern programming language.","title":"Documentation for COBOL Program TRDPB001"},{"location":"TRDPB001/#documentation-for-cobol-program-trdpb001","text":"","title":"Documentation for COBOL Program TRDPB001"},{"location":"TRDPB001/#1-high-level-overview","text":"","title":"1. High-Level Overview"},{"location":"TRDPB001/#purpose-and-functionality","text":"The COBOL program TRDPB001 handles order settlement processes. It reads from a settlement queue, books settlement and money accounts, updates orders, and logs summaries. The program supports multi-threading by running multiple batch jobs for settling trades based on currency.","title":"Purpose and Functionality"},{"location":"TRDPB001/#key-inputs-processes-and-outputs","text":"Inputs: Settlement Queue ( TBTRDSTQ ) Trade Data Processes: Initialize variables and open the settlement queue. Read and process trade records from the settlement queue. Perform accounting operations including booking settlement and money accounts. Update order statuses. Log summaries and handle exceptions. Outputs: Updated order records. Logged summaries. Exception reports.","title":"Key Inputs, Processes, and Outputs"},{"location":"TRDPB001/#2-data-structures","text":"","title":"2. Data Structures"},{"location":"TRDPB001/#input-data-formats","text":"Name Source Fields Trade Record TBTRDSTQ STQ-ID , STQ-TRADE-DATA , STQ-CURRENCY","title":"Input Data Formats"},{"location":"TRDPB001/#output-data-formats","text":"Name Source Fields Order Record TBTRDORD ORD-STATUS , ORD-CURRENCY , ORD-TRADING-XCHNG , ORD-TRADEID , ORD-FIGI , ORD-BUY-SELL-IND Summary Record TBTRDSUM SUM-CUSTOMER-ID , SUM-OVERDUE , SUM-REJECTED , SUM-SETTLED , SUM-CURRENCY , SUM-OPEN-BALANCE , SUM-TOTAL-DEBIT , SUM-TOTAL-CREDIT , SUM-CLOSE-BALANCE Exception Record TRDPBEXC EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE","title":"Output Data Formats"},{"location":"TRDPB001/#3-functional-decomposition","text":"","title":"3. Functional Decomposition"},{"location":"TRDPB001/#functions-and-modules","text":"","title":"Functions and Modules"},{"location":"TRDPB001/#4-program-logic","text":"","title":"4. Program Logic"},{"location":"TRDPB001/#pseudocode-representation","text":"BEGIN PROGRAM TRDPB001 PERFORM 1000-INITIALIZE THRU 1000-EXIT MOVE 1 TO WS-PAGE-NO PERFORM 1100-WRITE-HEADER THRU 1100-EXIT MOVE SPACES TO EOF-FLAG OPEN INPUT TBTRDSTQ MOVE 'ERROR OPENING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT MOVE 0 TO STQ-ID START TBTRDSTQ KEY >= STQ-ID MOVE 'ERROR POSITIONING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 1200-READ-BOOK THRU 1200-EXIT PERFORM 2000-READ-ALL-BOOKS THRU 2000-EXIT UNTIL END-OF-FILE CLOSE TBTRDSTQ MOVE 'ERROR CLOSING TBTRDSTQ' TO ERR-MSG PERFORM 9999-VSAM-ERR-CHK THRU 9999-EXIT PERFORM 3000-HOUSEKEEPING THRU 3000-EXIT STOP RUN END PROGRAM TRDPB001","title":"Pseudocode Representation"},{"location":"TRDPB001/#detailed-steps","text":"Initialization: Perform initialization by calling 1000-INITIALIZE . Set the page number to 1. Write the header to the output file by calling 1100-WRITE-HEADER . Set the EOF flag to spaces. Open the settlement queue file TBTRDSTQ for input. Handle any errors during file opening by calling 9999-VSAM-ERR-CHK . Reading and Processing Records: Set the settlement queue ID to 0. Start reading the settlement queue file from the beginning. Handle any errors during file positioning by calling 9999-VSAM-ERR-CHK . Read the first trade record by calling 1200-READ-BOOK . Loop through all trade records by calling 2000-READ-ALL-BOOKS until the end of the file is reached. Closing Files and Housekeeping: Close the settlement queue file TBTRDSTQ . Handle any errors during file closing by calling 9999-VSAM-ERR-CHK . Perform housekeeping tasks by calling 3000-HOUSEKEEPING . Terminate the program. This documentation provides a comprehensive guide to understanding and re-implementing the functionality of the COBOL program TRDPB001 in a modern programming language.","title":"Detailed Steps"},{"location":"TRDPB002/","text":"TRDPB002 COBOL Program Documentation \u00b6 1. High-Level Overview \u00b6 The TRDPB002 COBOL program is designed to handle security bookings. It performs the following main functions: - Debits the seller's security account. - Credits the buyer's security account. Key Inputs \u00b6 Security order details such as order quantity, currency, and account numbers. SQL database interactions to fetch and update security account balances. Key Outputs \u00b6 Updated security account balances. Exception reports in case of errors. 2. Data Structures \u00b6 Input Data Formats \u00b6 Name Source Fields Security Order Details Input File/DB TRD-ORDER-QTY (PIC 9(5)), TRD-CURRENCY (PIC X(3)), TRD-FIGI (PIC X(12)), TRD-BUYER-SEC-ACC-NUM (PIC X(10)), TRD-SELLER-SEC-ACC-NUM (PIC X(10)) Output Data Formats \u00b6 Name Destination Fields Security Account Balance Output File/DB POS-BALANCE (PIC 9(10)V99), POS-CURRENCY (PIC X(3)), POS-SAC-NUMBER (PIC X(10)), POS-FIGI (PIC X(12)) Exception Report Output File/DB EXCEPTION-TYPE (PIC X(10)), EXCEPTION-RECORD-LEN (PIC 9(4)), EXCEPTION-DESC (PIC X(100)) 3. Functional Decomposition \u00b6 0000-MAINLINE \u00b6 Description \u00b6 Main entry point of the program. It initializes the process by setting initial flags and calling the booking procedure. Inputs \u00b6 None Outputs \u00b6 TRD-STATUS CREDIT-BUYER DEBIT-SELLER WS-CR-DB-SWTICH TRD-SAC-BOOKING-DONE TRD-SAC-BOOKING-FAILED Logic \u00b6 Set TRD-SAC-BOOKING-FAILED to TRUE. Set DEBIT-SELLER to TRUE. Perform 1000-SAC-BOOKING . If TRD-SAC-BOOKING-DONE is TRUE: Set TRD-SAC-BOOKING-FAILED to TRUE. Set CREDIT-BUYER to TRUE. Perform 1000-SAC-BOOKING . Return control to the caller. 1000-SAC-BOOKING \u00b6 Description \u00b6 Handles the actual booking process by debiting the seller's account and crediting the buyer's account. Inputs \u00b6 TRD-ORDER-QTY SQLCODE DEBIT-SELLER WS-CR-DB-SWTICH TRD-FIGI TRD-BUYER-SEC-ACC-NUM TRD-SELLER-SEC-ACC-NUM SQL-INIT-DONE POS-BALANCE TRD-CURRENCY SQL-INIT-FLAG Outputs \u00b6 RETURN-CODE SQLCODE TRD-STATUS WS-SQLCODE DATA-EXCEPTION TRD-CURRENCY WS-EXCP-TYPE TRD-FIGI TRD-BUYER-SEC-ACC-NUM TRD-SELLER-SEC-ACC-NUM POS-BALANCE POS-CURRENCY POS-SAC-NUMBER TRD-SAC-BOOKING-DONE POS-FIGI TRD-SAC-BOOKING-FAILED WS-EXCEPTION Logic \u00b6 If DEBIT-SELLER is TRUE: Move TRD-CURRENCY to POS-CURRENCY . Move TRD-SELLER-SEC-ACC-NUM to POS-SAC-NUMBER . Move TRD-FIGI to POS-FIGI . Display relevant details. Else: Move TRD-CURRENCY to POS-CURRENCY . Move TRD-BUYER-SEC-ACC-NUM to POS-SAC-NUMBER . Move TRD-FIGI to POS-FIGI . Display relevant details. Execute SQL SELECT statement to fetch POS_BALANCE . If SQLCODE is not 0: Set TRD-SAC-BOOKING-FAILED to TRUE. Move SQLCODE to WS-SQLCODE . Set DATA-EXCEPTION to TRUE. Move SPACES to WS-EXCEPTION . Concatenate error message and store in WS-EXCEPTION . Perform 9000-REPORT-EXCEPTION . Go to 1000-EXIT . Fetch POS_BOOKING into POS-BALANCE . If SQLCODE is 0: If DEBIT-SELLER is TRUE: Compute POS-BALANCE by subtracting TRD-ORDER-QTY . Else: Compute POS-BALANCE by adding TRD-ORDER-QTY . Update TBTRDPOS with new POS-BALANCE . If SQLCODE is 0: Set TRD-SAC-BOOKING-DONE to TRUE. Else: Set TRD-SAC-BOOKING-FAILED to TRUE. Move SQLCODE to WS-SQLCODE . Set DATA-EXCEPTION to TRUE. Move SPACES to WS-EXCEPTION","title":"TRDPB002 COBOL Program Documentation"},{"location":"TRDPB002/#trdpb002-cobol-program-documentation","text":"","title":"TRDPB002 COBOL Program Documentation"},{"location":"TRDPB002/#1-high-level-overview","text":"The TRDPB002 COBOL program is designed to handle security bookings. It performs the following main functions: - Debits the seller's security account. - Credits the buyer's security account.","title":"1. High-Level Overview"},{"location":"TRDPB002/#key-inputs","text":"Security order details such as order quantity, currency, and account numbers. SQL database interactions to fetch and update security account balances.","title":"Key Inputs"},{"location":"TRDPB002/#key-outputs","text":"Updated security account balances. Exception reports in case of errors.","title":"Key Outputs"},{"location":"TRDPB002/#2-data-structures","text":"","title":"2. Data Structures"},{"location":"TRDPB002/#input-data-formats","text":"Name Source Fields Security Order Details Input File/DB TRD-ORDER-QTY (PIC 9(5)), TRD-CURRENCY (PIC X(3)), TRD-FIGI (PIC X(12)), TRD-BUYER-SEC-ACC-NUM (PIC X(10)), TRD-SELLER-SEC-ACC-NUM (PIC X(10))","title":"Input Data Formats"},{"location":"TRDPB002/#output-data-formats","text":"Name Destination Fields Security Account Balance Output File/DB POS-BALANCE (PIC 9(10)V99), POS-CURRENCY (PIC X(3)), POS-SAC-NUMBER (PIC X(10)), POS-FIGI (PIC X(12)) Exception Report Output File/DB EXCEPTION-TYPE (PIC X(10)), EXCEPTION-RECORD-LEN (PIC 9(4)), EXCEPTION-DESC (PIC X(100))","title":"Output Data Formats"},{"location":"TRDPB002/#3-functional-decomposition","text":"","title":"3. Functional Decomposition"},{"location":"TRDPB002/#0000-mainline","text":"","title":"0000-MAINLINE"},{"location":"TRDPB002/#1000-sac-booking","text":"","title":"1000-SAC-BOOKING"},{"location":"TRDPB003/","text":"TRDPB003 Documentation \u00b6 High-Level Overview \u00b6 The TRDPB003 COBOL program is designed to handle money booking transactions. The main functionalities include: - Debiting the seller's money account. - Crediting the buyer's money account. Data Structures \u00b6 Input Data Formats \u00b6 Name Source Fields Transaction Record Input File TRD-BUYER-MONEY-ACC-NUM , TRD-SELLER-MONEY-ACC-NUM , TRD-CURRENCY , TRD-ORDER-AMOUNT SQL Initialization Database SQL-INIT-DONE , SQLCODE , SQL-INIT-FLAG Output Data Formats \u00b6 Name Destination Fields Exception Report Output File WS-EXCEPTION , EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE Account Balance Update Database MAC-BALANCE , MAC-CURRENCY , MAC-NUMBER Functional Decomposition \u00b6 Main Functions \u00b6 0000-MAINLINE Inputs: None Outputs: TRD-MAC-BOOKING-FAILED , DEBIT-BUYER , TRD-MAC-BOOKING-DONE , TRD-STATUS Description: Sets initial flags for booking failure and debit buyer. Calls the 1000-MAC-BOOKING paragraph. If booking is done, sets the credit seller flag and calls 1000-MAC-BOOKING again. Ends with a GOBACK . 1000-MAC-BOOKING Inputs: CREDIT-SELLER , TRD-BUYER-MONEY-ACC-NUM , TRD-SELLER-MONEY-ACC-NUM , TRD-CURRENCY , TRD-ORDER-AMOUNT , SQLCODE Outputs: WS-EXCEPTION , WS-SQLCODE , TRD-MAC-BOOKING-DONE , TRD-STATUS , MAC-BALANCE , MAC-CURRENCY , MAC-NUMBER Description: Determines whether to credit seller or debit buyer. Executes SQL statements to fetch and update account balances. Handles SQL exceptions and reports them. 9000-REPORT-EXCEPTION Inputs: WS-EXCEPTION , APPL-EXCEPTION , DATA-EXCEPTION , SYSTEM-EXCEPTION , WS-EXCP-TYPE Outputs: EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE Description: Moves exception details to the exception report. Calls the exception handler program. Program Logic \u00b6 The program logic is broken down into the following steps: 0000-MAINLINE SET TRD-MAC-BOOKING-FAILED TO TRUE SET DEBIT-BUYER TO TRUE PERFORM 1000-MAC-BOOKING THRU 1000-EXIT IF TRD-MAC-BOOKING-DONE THEN SET TRD-MAC-BOOKING-FAILED TO TRUE SET CREDIT-SELLER TO TRUE PERFORM 1000-MAC-BOOKING THRU 1000-EXIT END-IF GOBACK 1000-MAC-BOOKING ``` IF CREDIT-SELLER MOVE TRD-CURRENCY TO MAC-CURRENCY MOVE TRD-SELLER-MONEY-ACC-NUM TO MAC-NUMBER ELSE MOVE TRD-CURRENCY TO MAC-CURRENCY MOVE TRD-BUYER-MONEY-ACC-NUM TO MAC-NUMBER END-IF SELECT MAC_BALANCE FROM TBTRDMAC WHERE MAC_CURRENCY = :MAC-CURRENCY AND MAC_NUMBER = :MAC-NUMBER FOR UPDATE OF MAC_BALANCE IF SQLCODE NOT = 0 SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Open MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT GO TO 1000-EXIT END-IF FETCH MAC_BOOKING INTO :MAC-BALANCE IF SQLCODE = 0 IF CREDIT-SELLER COMPUTE MAC-BALANCE = MAC-BALANCE + TRD-ORDER-AMOUNT ELSE COMPUTE MAC-BALANCE = MAC-BALANCE - TRD-ORDER-AMOUNT END-IF UPDATE TBTRDMAC SET MAC_BALANCE = :MAC-BALANCE WHERE MAC_CURRENCY = :MAC-CURRENCY AND MAC_NUMBER = :MAC-NUMBER IF SQLCODE = 0 SET TRD-MAC-BOOKING-DONE TO TRUE ELSE SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Update using MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT END-IF ELSE SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Fetch MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT END-IF CLOSE MAC_BOOKING ``` 9000-REPORT-EXCEPTION MOVE WS-EXCEPTION TO EXCEPTION-DESC MOVE LENGTH OF WS-EXCEPTION TO EXCEPTION-RECORD-LEN EVALUATE TRUE WHEN SYSTEM-EXCEPTION MOVE 'SYSTEM' TO EXCEPTION-TYPE WHEN APPL-EXCEPTION MOVE 'APPLICATION' TO EXCEPTION-TYPE WHEN DATA-EXCEPTION MOVE 'DATA' TO EXCEPTION-TYPE END-EVALUATE ADD 46 TO EXCEPTION-RECORD-LEN CALL WS-EXCEPTION-HANDLER USING EXCEPTION-RECORD-LEN, EXCEPTION-RECORD","title":"TRDPB003 Documentation"},{"location":"TRDPB003/#trdpb003-documentation","text":"","title":"TRDPB003 Documentation"},{"location":"TRDPB003/#high-level-overview","text":"The TRDPB003 COBOL program is designed to handle money booking transactions. The main functionalities include: - Debiting the seller's money account. - Crediting the buyer's money account.","title":"High-Level Overview"},{"location":"TRDPB003/#data-structures","text":"","title":"Data Structures"},{"location":"TRDPB003/#input-data-formats","text":"Name Source Fields Transaction Record Input File TRD-BUYER-MONEY-ACC-NUM , TRD-SELLER-MONEY-ACC-NUM , TRD-CURRENCY , TRD-ORDER-AMOUNT SQL Initialization Database SQL-INIT-DONE , SQLCODE , SQL-INIT-FLAG","title":"Input Data Formats"},{"location":"TRDPB003/#output-data-formats","text":"Name Destination Fields Exception Report Output File WS-EXCEPTION , EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE Account Balance Update Database MAC-BALANCE , MAC-CURRENCY , MAC-NUMBER","title":"Output Data Formats"},{"location":"TRDPB003/#functional-decomposition","text":"","title":"Functional Decomposition"},{"location":"TRDPB003/#main-functions","text":"0000-MAINLINE Inputs: None Outputs: TRD-MAC-BOOKING-FAILED , DEBIT-BUYER , TRD-MAC-BOOKING-DONE , TRD-STATUS Description: Sets initial flags for booking failure and debit buyer. Calls the 1000-MAC-BOOKING paragraph. If booking is done, sets the credit seller flag and calls 1000-MAC-BOOKING again. Ends with a GOBACK . 1000-MAC-BOOKING Inputs: CREDIT-SELLER , TRD-BUYER-MONEY-ACC-NUM , TRD-SELLER-MONEY-ACC-NUM , TRD-CURRENCY , TRD-ORDER-AMOUNT , SQLCODE Outputs: WS-EXCEPTION , WS-SQLCODE , TRD-MAC-BOOKING-DONE , TRD-STATUS , MAC-BALANCE , MAC-CURRENCY , MAC-NUMBER Description: Determines whether to credit seller or debit buyer. Executes SQL statements to fetch and update account balances. Handles SQL exceptions and reports them. 9000-REPORT-EXCEPTION Inputs: WS-EXCEPTION , APPL-EXCEPTION , DATA-EXCEPTION , SYSTEM-EXCEPTION , WS-EXCP-TYPE Outputs: EXCEPTION-DESC , EXCEPTION-RECORD-LEN , EXCEPTION-TYPE Description: Moves exception details to the exception report. Calls the exception handler program.","title":"Main Functions"},{"location":"TRDPB003/#program-logic","text":"The program logic is broken down into the following steps: 0000-MAINLINE SET TRD-MAC-BOOKING-FAILED TO TRUE SET DEBIT-BUYER TO TRUE PERFORM 1000-MAC-BOOKING THRU 1000-EXIT IF TRD-MAC-BOOKING-DONE THEN SET TRD-MAC-BOOKING-FAILED TO TRUE SET CREDIT-SELLER TO TRUE PERFORM 1000-MAC-BOOKING THRU 1000-EXIT END-IF GOBACK 1000-MAC-BOOKING ``` IF CREDIT-SELLER MOVE TRD-CURRENCY TO MAC-CURRENCY MOVE TRD-SELLER-MONEY-ACC-NUM TO MAC-NUMBER ELSE MOVE TRD-CURRENCY TO MAC-CURRENCY MOVE TRD-BUYER-MONEY-ACC-NUM TO MAC-NUMBER END-IF SELECT MAC_BALANCE FROM TBTRDMAC WHERE MAC_CURRENCY = :MAC-CURRENCY AND MAC_NUMBER = :MAC-NUMBER FOR UPDATE OF MAC_BALANCE IF SQLCODE NOT = 0 SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Open MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT GO TO 1000-EXIT END-IF FETCH MAC_BOOKING INTO :MAC-BALANCE IF SQLCODE = 0 IF CREDIT-SELLER COMPUTE MAC-BALANCE = MAC-BALANCE + TRD-ORDER-AMOUNT ELSE COMPUTE MAC-BALANCE = MAC-BALANCE - TRD-ORDER-AMOUNT END-IF UPDATE TBTRDMAC SET MAC_BALANCE = :MAC-BALANCE WHERE MAC_CURRENCY = :MAC-CURRENCY AND MAC_NUMBER = :MAC-NUMBER IF SQLCODE = 0 SET TRD-MAC-BOOKING-DONE TO TRUE ELSE SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Update using MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT END-IF ELSE SET TRD-MAC-BOOKING-FAILED TO TRUE MOVE SQLCODE TO WS-SQLCODE SET DATA-EXCEPTION TO TRUE MOVE SPACES TO WS-EXCEPTION STRING 'Fetch MAC_BOOKING Cursor failed : SQLCODE = ' WS-SQLCODE DELIMITED BY SIZE INTO WS-EXCEPTION PERFORM 9000-REPORT-EXCEPTION THRU 9000-EXIT END-IF CLOSE MAC_BOOKING ``` 9000-REPORT-EXCEPTION MOVE WS-EXCEPTION TO EXCEPTION-DESC MOVE LENGTH OF WS-EXCEPTION TO EXCEPTION-RECORD-LEN EVALUATE TRUE WHEN SYSTEM-EXCEPTION MOVE 'SYSTEM' TO EXCEPTION-TYPE WHEN APPL-EXCEPTION MOVE 'APPLICATION' TO EXCEPTION-TYPE WHEN DATA-EXCEPTION MOVE 'DATA' TO EXCEPTION-TYPE END-EVALUATE ADD 46 TO EXCEPTION-RECORD-LEN CALL WS-EXCEPTION-HANDLER USING EXCEPTION-RECORD-LEN, EXCEPTION-RECORD","title":"Program Logic"}]}